#!/usr/bin/env python3
import argparse
import os
import subprocess
import sys

def main():
    parser = argparse.ArgumentParser(description="Myder CLI (docker run wrapper)")
    subparsers = parser.add_subparsers(dest="command")

    run_parser = subparsers.add_parser(
    "run",
    help="Run myder in Docker",
    description=(
        "Run myder in Docker.\n\n"
        "Environment variable options:\n"
        "  NOMOUNT=1     Do not mount current directory to /app in container\n"
        "  FORCE_YES=1   Add --yes-always flag to myder in container\n"
        "  .env file     Used for --env-file to pass secrets\n"
    )
)
    run_parser.add_argument("--model", type=str, help="Model name (default: openrouter/google/gemini-2.5-pro-exp-03-25:free)")

    args = parser.parse_args()

    if args.command == "run":
        # Model name
        model = args.model if args.model else "openrouter/google/gemini-2.5-pro-exp-03-25:free"
        model_arg = model

        # Environment variables
        nomount = os.environ.get("NOMOUNT", "0") == "1"
        force_yes = os.environ.get("FORCE_YES", "0") == "1"

        # Volume mount
        volume_arg = [] if nomount else ["--volume", f"{os.getcwd()}:/app"]

        # yes flag
        yes_arg = ["--yes-always"] if force_yes else []

        # .env file
        env_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", ".env")
        env_file_arg = ["--env-file", os.path.abspath(env_file)] if os.path.exists(env_file) else []

        # docker run command
        docker_cmd = [
            "docker", "run", "--rm", "-it",
            *env_file_arg,
            *volume_arg,
            "--workdir=/app",
            "myder",
            "--analytics-disable",
            *yes_arg,
            "--model", model_arg
        ]

        # Execute
        subprocess.run(docker_cmd)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()